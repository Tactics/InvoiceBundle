<?php

namespace Tactics\InvoiceBundle\Tools;

use Tactics\InvoiceBundle\Propel\ObjectManager;
use Tactics\InvoiceBundle\Model\Invoice;
use Tactics\InvoiceBundle\Model\InvoiceItem;

class AgressoInvoiceConverter
{
    private $invoiceMgr;
    private $customerInfoMgr;
    private $accountMgr;
    private $vatMgr;
    
    /**
     * constructor
     *
     * @param ObjectManager $customerSchemeMgr
     */
    public function __construct(ObjectManager $invoiceMgr, ObjectManager $customerInfoMgr, ObjectManager $accountMgr, ObjectManager $vatMgr)
    {
        $this->invoiceMgr = $invoiceMgr;
        $this->customerInfoMgr = $customerInfoMgr;
        $this->accountMgr = $accountMgr;
        $this->vatMgr = $vatMgr;
    }
    
    /**
     * 
     * @param array $invoiceIds
     */
    public function convert($invoiceIds)
    {
        $now = new \myDate(time());
        
        $xml = '<?xml version="1.0" encoding="UTF-8"?>';
        $xml .= sprintf('<!--XML generated by Tactics on %s-->', $now->format('f'));
        $xml .= '<!--Link Agresso TAC_BRUGGE-->';
        $xml .= '<Facturen>';
        $xml .= sprintf('<BatchId>%s</BatchId>', 'TAC' . $now->format('yyyyMMddHms'));
        $xml .= '<ReportClient>SB</ReportClient>'; // Stad Brugge
        
        $invoices = $this->invoiceMgr->search(array('id' => $invoiceIds));
        foreach ($invoices as $invoice)
        {
            $xml .= $this->getVoucher($invoice);
        }
        $xml .= '</Facturen>';
        
        return $xml;
    }
    
    private function getVoucher(Invoice $invoice)
    {
        $voucher = sprintf('<VoucherNo>%u</VoucherNo>', $invoice->getNumber()); // factuurnr
        $voucher .= sprintf('<VoucherType>%s</VoucherType>', $invoice->getJournalCode()); // dagboek/journaal
        $voucher .= '<CompanyCode>SB</CompanyCode>'; // Stad Brugge
        $voucher .= sprintf('<Period>%s</Period>', $invoice->getDate('Ym')); // boekingsperiode, nog afh van instelbare periode?
        $voucher .= sprintf('<VoucherDate>%s</VoucherDate>', $invoice->getDate()); // factuurdatum
        
        // vraag: AR transaction per factuur of lijn?
        //$voucher .= $this->getArTransaction($invoice); // klantrekening
        foreach ($invoice->getItems() as $item)
        {
            $voucher .= $this->getArTransaction($item); // klantrekening
            $voucher .= $this->getGlTransaction($item); // verkooprekening
            
            // vraag: TX transaction per factuur of lijn?
            if ($item->getVatPercentage() > 0)
            {
                $voucher .= $this->getTxTransaction($item); // alleen indien met BTW
            }            
        }
        
        return sprintf('<Voucher>%s</Voucher>', $voucher);
    }
    
    /**
     * transactie voor klantrekening
     * 
     * @param InvoiceItem $item
     * @return string
     */
    private function getArTransaction(InvoiceItem $item /* of Invoice $invoice?*/)
    {
        /* @var $invoice Invoice */
        $invoice = $item->getInvoice();
        
        $arTransaction = '<Transaction>';
        $arTransaction .= '<TransType>AR</TransType>';
        $arTransaction .= sprintf('<Description>%s</Description>', $item->getGroupDescription()); // globale omschrijving?
        $arTransaction .= sprintf('<TransDate>%s</TransDate>', $invoice->getDate()); // factuurdatum;
        
        // AR amount is positief indien factuur, negatief indien creditnota!
        $amountExVat = bcmul($item->getQuantity(), $item->getUnitPrice(), 2);
        $vat = bcdiv(bcmul((int)$item->getVatPercentage(), $amountExVat, 2), 100, 2);
        $amount = bcadd($amountExVat, $vat, 2);
        $arTransaction .= sprintf('<Amounts><Amount>%.2f</Amount></Amounts>', $amount); // bedrag inclusief btw
        
        $arTransaction .= '<GLAnalysis>';
        
        // contra_account_code en btw_account_code nog opslaan bij item
        $account = $this->accountMgr->searchOne(array(
            'code' => $item->getGlAccountCode(), 'scheme_id' => $invoice->getSchemeId()
        ));
        $arTransaction .= sprintf('<Account>%s</Account>', $account->getContraAccountCode()); // contra_account_code van overeenkomende verkooprekening        
        // dims hier ook nodig? dan ook contra_dims nodig! lijkt wat overkill!!!
//        $arTransaction .= '<Dim1>dim1</Dim1>';
//        $arTransaction .= '<Dim2>dim2</Dim2>';
//        $arTransaction .= '<Dim3>dim3</Dim3>';
//        $arTransaction .= '<Dim4>dim4</Dim4>';
//        $arTransaction .= '<Dim5>dim5</Dim5>';
//        $arTransaction .= '<Dim6>dim6</Dim6>';
//        $arTransaction .= '<Dim7>dim7</Dim7>';
        $arTransaction .= '</GLAnalysis>';
        
        $arTransaction .= $this->getApArInfo($invoice);
        
        $arTransaction .= '</Transaction>';
        
        return $arTransaction;
    }
    
    /**
     * transactie voor verkooprekening
     * 
     * @param InvoiceItem $item
     * @return string
     */
    private function getGlTransaction(InvoiceItem $item)
    {
        /* @var $invoice Invoice */
        $invoice = $item->getInvoice();
        
        $glTransaction = '<Transaction>';
        $glTransaction .= '<TransType>GL</TransType>';       
        $glTransaction .= sprintf('<Description>%s</Description>', $item->getDescription()); // globale omschrijving?
        $glTransaction .= sprintf('<TransDate>%s</TransDate>', $invoice->getDate()); // factuurdatum;
        
        // amount is negatief indien factuur, positief indien creditnota!
        $amount = bcsub(0, bcmul($item->getQuantity(), $item->getUnitPrice(), 2), 2);
        $glTransaction .= sprintf('<Amounts><Amount>%.2f</Amount></Amounts>', $amount); // bedrag exclusief btw
        
        $glTransaction .= '<GLAnalysis>';
        $glTransaction .= sprintf('<Account>%s</Account>', $item->getGlAccountCode()); // grootboekrekening = gl_account_code
        $glTransaction .= sprintf('<Dim1>%s</Dim1>', $item->getAnalytical1AccountCode());
        $glTransaction .= sprintf('<Dim2>%s</Dim2>', $item->getAnalytical2AccountCode());
        $glTransaction .= sprintf('<Dim3>%s</Dim3>', $item->getAnalytical3AccountCode());
        $glTransaction .= sprintf('<Dim4>%s</Dim4>', $item->getAnalytical4AccountCode());
        $glTransaction .= sprintf('<Dim5>%s</Dim5>', $item->getAnalytical5AccountCode());
        $glTransaction .= sprintf('<Dim6>%s</Dim6>', $item->getAnalytical6AccountCode());
        $glTransaction .= sprintf('<Dim7>%s</Dim7>', $item->getAnalytical7AccountCode());
        
        // vat_code of contra_account_code en btw_account_code nog opslaan bij item?
        $vat = $this->vatMgr->searchOne(array(
            'percentage' => $item->getVatPercentage(), 'scheme_id' => $invoice->getSchemeId()
        )); 
        $glTransaction .= sprintf('<TaxCode>%s</TaxCode>', $vat->getCode());; // BTW codes nog aan te leveren
        $glTransaction .= '</GLAnalysis>';
        
        $glTransaction .= $this->getApArInfo($invoice);
        
        $glTransaction .= '</Transaction>';
        
        return $glTransaction;
    }
    
    /**
     * transactie voor btw rekening
     * 
     * @param InvoiceItem $item
     * @return string
     */
    private function getTxTransaction(InvoiceItem $item)
    {
        /* @var $invoice Invoice */
        $invoice = $item->getInvoice();
        
        $txTransaction = '<Transaction>';
        $txTransaction .= '<TransType>TX</TransType>';       
        
        // amount is negatief indien factuur, positief indien creditnota!
        $baseAmount = bcsub(0, bcmul($item->getQuantity(), $item->getUnitPrice(), 2), 2);
        $amount = bcdiv(bcmul($baseAmount, $item->getVatPercentage(), 2), 100, 2);
        $txTransaction .= sprintf('<Amounts><Amount>%.2f</Amount></Amounts>', $amount); // btw
                
        $txTransaction .= '<GLAnalysis>';
        
        // vat_code of contra_account_code en btw_account_code nog opslaan bij item?
        $vat = $this->vatMgr->searchOne(array(
            'percentage' => $item->getVatPercentage(), 'scheme_id' => $invoice->getSchemeId()
        )); 
        $txTransaction .= sprintf('<Account>%s</Account>', $vat->getAccountCode()); // vat.account_code
        $txTransaction .= sprintf('<TaxCode>%s</TaxCode>', $vat->getCode());; // BTW codes nog aan te leveren
        $txTransaction .= '</GLAnalysis>';
        
        $txTransaction .= '<TaxTransInfo>';
        $txTransaction .= sprintf('<Account2>%s</Account2>', $item->getGlAccountCode()); // verwijst naar overeenkomende account van gl transactie
        $txTransaction .= sprintf('<BaseAmount>%.2f</BaseAmount>', $baseAmount); // heffingsbedrag btw
        $txTransaction .= sprintf('<BaseCurr>%.2f</BaseCurr>', $baseAmount); // altijd identiek?
        $txTransaction .= '</TaxTransInfo>';
        
        $txTransaction .= $this->getApArInfo($item->getInvoice());
        
        $txTransaction .= '</Transaction>';
        
        return $txTransaction;
    }
    
    private function getApArInfo(Invoice $invoice)
    {
        $debiteur = $invoice->getCustomer();
        $apArInfo = '<ApArInfo>';
        
        //01 (Klanten - Belgische ondernemingen), 02 (Klanten - Buitenlandse ondernemingen), 03 (Klanten - Belgische natuurlijke personen), 04 (Klanten - Buitenlande natuurlijke personen)
        $apArInfo .= sprintf('<ApArGroup>%s</ApArGroup>', $this->getApArGroup($debiteur)); 
        
        // agresso deb nr: Debiteur ID, in het geval van een onderneming het kbo nummer 10 cijferig, in het geval van een persoon het rijksregisternummer 11 cijferig
        $customerInfo = $this->customerInfoMgr->searchOne(array(
          'name' => 'proacc_nummer', 'customer_id' => $debiteur->getId(), 'customer_class' => get_class($debiteur)
        ));
        
        $apArInfo .= sprintf('<ApArNo>%s</ApArNo>', $customerInfo->getValue()); 
        $apArInfo .= sprintf('<InvoiceNo>%u</InvoiceNo>', $invoice->getNumber()); // factuurnr
        $apArInfo .= sprintf('<Duedate>%s</Duedate>', $invoice->getDateDue()); // due date
        $apArInfo .= sprintf('<BacsId>%s</BacsId>', $invoice->getStructuredCommunication()); // gestructureerde mededeling
        // nog aan te leveren, voor onderscheid overschrijving/online betaling
        $apArInfo .= '<PayMethod></PayMethod>';
        $apArInfo .= '</ApArInfo>';
        
        return $apArInfo;
    }
    
    /**
     * 
     * @param mixed $customer Persoon of Organisatie
     */
    private function getApArGroup($debiteur)
    {
        //01 (Klanten - Belgische ondernemingen), 02 (Klanten - Buitenlandse ondernemingen), 
        //03 (Klanten - Belgische natuurlijke personen), 04 (Klanten - Buitenlande natuurlijke personen)
        $map = array(
          'Organisatie' => array(
            'BE' => '01',
            'foreign' => '02'
          ),
          'Persoon' => array(
            'BE' => '03',
            'foreign' => '04'
          )
        );
          
        $class = get_class($debiteur);
        $nationaliteit = $class === 'Persoon'
          ? $debiteur->getNationaliteit()
          : $debiteur->getLandId();
        
        return isset($map[$class][$nationaliteit]) ? $map[$class][$nationaliteit] : $map[$class]['foreign'];
    }
}
